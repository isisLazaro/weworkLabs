{"version":3,"sources":["Components/utils/BurgerMenu.js","Components/utils/Input.js","Components/Home/Home.js","Components/Register/Register.js","App.js","serviceWorker.js","index.js"],"names":["BurgerMenu","event","preventDefault","pageWrapId","styles","bmBurgerButton","position","width","height","left","top","bmBurgerBars","background","bmBurgerBarsHover","bmCrossButton","bmCross","bmMenuWrap","bmMenu","padding","fontSize","bmMorphShape","fill","bmItemList","color","bmItem","display","bmOverlay","className","id","href","Component","Input","style","this","props","placeholder","Home","handleClick","console","log","changeValueSelect","e","state","valueInput","date","Date","borderRadius","textAlign","marginTop","backgoundColor","toLocaleTimeString","Onclick","name","onChange","value","onClick","Register","App","basename","process","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"qXAkFeA,G,2LA7ECC,GACZA,EAAMC,mB,+BAsDN,OACE,kBAAC,QAAD,CAAMC,WAAa,YAAcC,OAjDtB,CACXC,eAAgB,CACdC,SAAU,QACVC,MAAO,OACPC,OAAQ,OACRC,KAAM,OACNC,IAAK,QAEPC,aAAc,CACZC,WAAY,WAEdC,kBAAmB,CACjBD,WAAY,WAEdE,cAAe,CACbN,OAAQ,OACRD,MAAO,QAETQ,QAAS,CACPH,WAAY,WAEdI,WAAY,CACVV,SAAU,QACVE,OAAQ,QAEVS,OAAQ,CACNL,WAAY,UACZM,QAAS,gBACTC,SAAU,UAEZC,aAAc,CACZC,KAAM,WAERC,WAAY,CACVC,MAAO,UACPL,QAAS,SAEXM,OAAQ,CACNC,QAAS,gBAEXC,UAAW,CACTd,WAAY,wBASZ,yBAAKe,UAAU,YACb,yBAAMA,UAAU,aACZ,uBAAGC,GAAG,OAAQC,KAAK,KAAnB,WAGJ,yBAAKF,UAAU,aAEX,uBAAGC,GAAG,QAASC,KAAK,SAApB,eAEJ,yBAAKF,UAAU,aAEX,uBAAGC,GAAG,UAAWC,KAAK,KAAtB,kB,GArEWC,cCQTC,G,uLARV,OACI,2BACAC,MAAOC,KAAKC,MAAMF,MAClBG,YAAaF,KAAKC,MAAMC,kB,GALdL,cCmFLM,E,YA7EX,WAAYF,GAAQ,IAAD,8BACf,4CAAMA,KAORG,YAAc,WAEZC,QAAQC,IAAI,WAAZ,iBAVe,EA6BnBC,kBAAoB,SAAAC,GAKdH,QAAQC,IAAIE,IAhCd,EAAKC,MAAQ,CACXC,WAAY,GACZC,KAAK,IAAIC,MAJI,E,sEAqCT,IAAD,OACJb,EAAQ,CACRzB,MAAM,QACNC,OAAO,MACPsC,aAAa,OACbC,UAAU,SACVC,UAAU,QAIb,OACI,6BAASrB,UAAU,gBACf,kBAAC,EAAD,CAAYvB,OAAQ,CAAC6C,eAAe,SAEpC,6BACI,yBAAKtB,UAAU,aACf,gDAAsBM,KAAKS,MAAME,KAAKM,qBAAtC,KACI,kBAAC,EAAD,CACEf,YAAY,sBACZH,MAAOA,EACPmB,QAASlB,KAAKO,oBAEd,4BAAQY,KAAK,SAASpB,MAAOC,KAAKC,MAAMF,MAAOqB,SAAUpB,KAAKC,MAAMiB,SAC7E,4BAAQG,MAAM,WAAQtB,MAAOA,EAAOuB,QAAStB,KAAKI,aAAlD,sBACA,4BAAQiB,MAAM,OAAQtB,MAAOA,EAAOuB,QAAS,SAACd,GAAD,OAAO,EAAKJ,YAAYI,KAArE,kBACA,4BAAQa,MAAM,WAAYtB,MAAOA,EAAOuB,QAAStB,KAAKI,aAAtD,wB,GA/DIP,aC4BH0B,G,uLA3BR,IAAIxB,EAAQ,CACRzB,MAAM,QACNC,OAAO,MACPsC,aAAa,OACbC,UAAU,SACVC,UAAU,QAEd,OACI,6BAASrB,UAAU,oBACf,kBAAC,EAAD,CACIQ,YAAY,sBACZH,MAAOA,IAGX,kBAAC,EAAD,CACIG,YAAY,0BACZH,MAAOA,IAGX,0DACA,sCAAmB,sCACnB,yD,GAxBOF,cCeR2B,MAXf,WACE,OACE,kBAAC,IAAD,CAAQC,SAAUC,eAChB,kBAAC,IAAD,CAAOC,OAAK,EAACC,KAAK,IAAIC,UAAWN,IACjC,kBAAC,IAAD,CAAQK,KAAK,QAAQC,UAAW1B,MCDlB2B,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.8afd38ed.chunk.js","sourcesContent":["import { slide as Menu } from 'react-burger-menu'\r\nimport React, { Component } from 'react';\r\nimport './utils.css'\r\n\r\nclass BurgerMenu extends Component {\r\n  showSettings (event) {\r\n    event.preventDefault();\r\n    \r\n  }\r\n\r\n  render () {\r\n    // NOTE: You also need to provide styles, see https://github.com/negomi/react-burger-menu#styling\r\n    var styles = {\r\n      bmBurgerButton: {\r\n        position: 'fixed',\r\n        width: '36px',\r\n        height: '30px',\r\n        left: '36px',\r\n        top: '36px'\r\n      },\r\n      bmBurgerBars: {\r\n        background: '#373a47'\r\n      },\r\n      bmBurgerBarsHover: {\r\n        background: '#a90000'\r\n      },\r\n      bmCrossButton: {\r\n        height: '24px',\r\n        width: '24px'\r\n      },\r\n      bmCross: {\r\n        background: '#bdc3c7'\r\n      },\r\n      bmMenuWrap: {\r\n        position: 'fixed',\r\n        height: '100%'\r\n      },\r\n      bmMenu: {\r\n        background: '#373a47',\r\n        padding: '2.5em 1.5em 0',\r\n        fontSize: '1.15em'\r\n      },\r\n      bmMorphShape: {\r\n        fill: '#373a47'\r\n      },\r\n      bmItemList: {\r\n        color: '#b8b7ad',\r\n        padding: '0.8em'\r\n      },\r\n      bmItem: {\r\n        display: 'inline-block'\r\n      },\r\n      bmOverlay: {\r\n        background: 'rgba(0, 0, 0, 0.3)'\r\n      }\r\n     \r\n\r\n      \r\n      \r\n    }\r\n    return (\r\n      <Menu pageWrapId={ \"page-wrap\" } styles={ styles } >\r\n        <div className=\"box-menu\">\r\n          <div  className=\"menu-item\">\r\n              <a id=\"home\"  href=\"/\">Inicio</a>\r\n\r\n          </div>\r\n          <div className=\"menu-item\">\r\n\r\n              <a id=\"about\"  href=\"/home\">Gestión</a>\r\n          </div>\r\n          <div className=\"menu-item\">\r\n\r\n              <a id=\"contact\"  href=\"/\">Visitas</a>\r\n          </div>\r\n        </div>\r\n        \r\n      </Menu>\r\n    );\r\n  }\r\n}\r\n\r\nexport default BurgerMenu;","import React, { Component } from 'react';\r\n\r\nclass Input extends Component {\r\n    render() {  \r\n      return (\r\n          <input \r\n          style={this.props.style}\r\n          placeholder={this.props.placeholder}\r\n          />\r\n      )}}\r\n\r\n\r\n export default Input;","import React, { Component } from 'react';\r\n// import QR from '../utils/QR'\r\nimport BurgerMenu from '../utils/BurgerMenu';\r\nimport './Home.css';\r\nimport Input from '../utils/Input';\r\n\r\n\r\nclass Home extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n          valueInput: '',\r\n          date:new Date(),\r\n          \r\n        };\r\n      }\r\n      handleClick = ()=> {\r\n    \r\n        console.log('this is:', this);\r\n      }\r\n    //   componentDidMount() {\r\n    //     this.timerID = setInterval(\r\n    //       () => this.tick(),\r\n    //       1000\r\n    //     );\r\n    //   }\r\n    \r\n    //   componentWillUnmount() {\r\n    //     clearInterval(this.timerID);\r\n    //   }\r\n    \r\n    //   tick() {\r\n    //     this.setState({\r\n    //       date: new Date()\r\n    //     });\r\n    //   }\r\n    \r\n    changeValueSelect = e => {\r\n        \r\n        //   this.setState({\r\n        //     valueInput: e.target.value\r\n        //   });\r\n          console.log(e)\r\n        \r\n      };\r\n    render() {\r\n     var style = {\r\n         width:'15rem', \r\n         height:'4vh', \r\n         borderRadius:'10px', \r\n         textAlign:'center',\r\n         marginTop:'2rem'\r\n        }\r\n          \r\n          \r\n      return (\r\n          <section className=\"home-section\">\r\n              <BurgerMenu styles={{backgoundColor:'red'}}\r\n              />\r\n              <div>\r\n                  <div className=\"box-input\">\r\n                  <h2>Hora de entrada: {this.state.date.toLocaleTimeString()}.</h2>\r\n                      <Input \r\n                        placeholder=\"Introduce tu nombre\"\r\n                        style={style}\r\n                        Onclick={this.changeValueSelect}\r\n                        />\r\n                        <select name=\"select\" style={this.props.style} onChange={this.props.Onclick}>\r\n               <option value=\"razón\" style={style} onClick={this.handleClick}>Razón de visita</option> \r\n               <option value=\"cita\"  style={style} onClick={(e) => this.handleClick(e)}>Tengo una cita</option>\r\n               <option value=\"vendedor\"  style={style} onClick={this.handleClick}>Soy vendedor</option>\r\n\r\n        </select>\r\n                                \r\n                       \r\n                        \r\n\r\n                  </div>\r\n              \r\n              </div>\r\n              \r\n\r\n          </section>\r\n\r\n      )}}\r\nexport default Home;","import React, { Component } from 'react';\r\nimport './Register.css';\r\n\r\nimport Input from '../utils/Input'\r\n\r\nclass Register extends Component {\r\n\r\n    render() {\r\n        var style = {\r\n            width:'15rem', \r\n            height:'4vh', \r\n            borderRadius:'10px', \r\n            textAlign:'center',\r\n            marginTop:'2rem'\r\n           }\r\n        return (\r\n            <section className=\"section-register\">\r\n                <Input\r\n                    placeholder=\"Introduce tu nombre\"\r\n                    style={style}\r\n                    \r\n                />\r\n                <Input\r\n                    placeholder=\"¿a quién visitas?\"\r\n                    style={style}\r\n                    \r\n                />\r\n                <label>¿eres discapacitado?</label>\r\n                <button>Si</button><button>No</button>\r\n                <button>Enviar respuesta</button>\r\n        \r\n            </section>\r\n        )}}\r\n        \r\n\r\n export default Register;","import React from 'react';\r\nimport { BrowserRouter as Router, Route } from 'react-router-dom';\r\nimport './App.css';\r\n\r\nimport Home from './Components/Home/Home';\r\nimport Register from './Components/Register/Register'\r\n\r\n\r\n\r\nfunction App() {\r\n  return (\r\n    <Router basename={process.env.PUBLIC_URL}>\r\n      <Route exact path='/' component={Register} />\r\n      <Route  path='/home' component={Home} />\r\n\r\n    \r\n    </Router>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.1/8 is considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl)\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready.then(registration => {\r\n      registration.unregister();\r\n    });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(<App />, document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}